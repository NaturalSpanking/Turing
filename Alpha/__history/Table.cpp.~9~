#pragma hdrstop

#include "Table.h"
Table::Table(unsigned Rows, unsigned Columns)
{
	rule defRule;
	char def = '0';
	table = std::vector<std::vector<rule> >(Rows, std::vector<rule>(Columns, defRule));
	for(unsigned i=0; i<table.size(); i++)
	{
		table[i][0].symbol = def;
		def++;
    }
}
int Table::AddCol()
{
	rule defRule;
	for(unsigned i=0; i<table.size(); i++)
	{
		table[i].push_back(defRule);
	}
	return 0;
}
int Table::AddCol(int index)
{
	rule defRule;
	for(unsigned i=0; i<table.size(); i++)
	{
		table[i].insert(&table[i][index], defRule);
	}
	return 0;
}
int Table::AddRow(char c)
{

	return 0;
}
/*int Table::DelCol()
{

}
int Table::DelCol(int Index)
{

}
int Table::DelRow(char c)
{

}
int Table::LoadMemento(char* pathToFile)
{

}
int Table::SaveMemento(char* pathToFile)
{

} */
#pragma package(smart_init)
